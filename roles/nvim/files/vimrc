set number
set wrap
set showmode
set title
set hidden
set autoread
set textwidth=79

set cursorline
set backspace=indent,eol,start

set sts=2
let &shiftwidth=&sts
set expandtab

set hlsearch
set incsearch
set smartcase

inoremap jk <Esc>

noremap H ^
nnoremap L $
onoremap L $
vnoremap L g_

nnoremap <expr> <silent> k v:count == 0 ? 'gk' : 'k'
nnoremap <expr> <silent> j v:count == 0 ? 'gj' : 'j'

nnoremap <silent> <Esc> :noh<CR><Esc>
nnoremap <BS> <C-^>
nnoremap <C-p> <Tab>

set path+=**

set nocp
syntax on
filetype plugin indent on

set background=dark
set termguicolors

if !has('nvim')
  finish
endif

syntax off " we use treesitter for syntax highlighting

" nvim-specific settings

" auto-install vimplug and plugins
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin(stdpath('data') . '/plugged')
  Plug 'neovim/nvim-lspconfig'
  Plug 'williamboman/nvim-lsp-installer'
  Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
  Plug 'nvim-treesitter/nvim-treesitter-textobjects'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'
  Plug 'justinmk/vim-dirvish'
  Plug 'tpope/vim-fugitive' " Git
  Plug 'tpope/vim-surround' " Surround parens

  "Plug 'cocopon/iceberg.vim'
  "Plug 'kyazdani42/blue-moon'
  Plug 'habamax/vim-alchemist'
call plug#end()

set termguicolors
colorscheme alchemist

let mapleader = ','
set inccommand=nosplit

lua << EOF
-- highlight on yank
vim.cmd [[
  augroup YankHighlight
    autocmd!
    autocmd TextYankPost * silent! lua vim.highlight.on_yank()
  augroup END
]]

-- Telescope
require('telescope').setup {
  defaults = {
    mappings = {
      i = {
        ['<C-u>'] = false,
        ['<C-d>'] = false,
      }
    }
  }
}
--Add leader shortcuts
vim.api.nvim_set_keymap('n', '<Tab>', [[<cmd>lua require('telescope.builtin').buffers()<CR>]], { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<leader>f', [[<cmd>lua require('telescope.builtin').find_files({previewer = false})<CR>]], { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<leader>g', [[<cmd>lua require('telescope.builtin').live_grep()<CR>]], { noremap = true, silent = true })

-- Treesitter configs
-- Parsers must be installed manually via :TSInstall
require('nvim-treesitter.configs').setup {
  highlight = {
    enable = true,
  },
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = 'gnn',
      node_incremental = 'grn',
      scope_incremental = 'grc',
      node_decremental = 'grm',
    },
  },
  indent = {
    enable = true,
  },
  textobjects = {
    select = {
      enable = true,
      lookahead = true, -- auto jump forward to textobj
      keymaps = {
        ['af'] = '@function.outer',
        ['if'] = '@function.inner',
        ['ac'] = '@class.outer',
        ['ic'] = '@class.inner',
      },
    },
    move = {
      enable = true,
      set_jumps = true,
    },
  }
}

-- LSP global
local on_attach = function(client, bufnr)
  -- Mappings
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
  buf_set_option('formatexpr', 'v:lua.vim.lsp.formatexpr()')

  -- Mappings
  local opts = { noremap = true, silent = true }

  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'gr', '<Cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<leader>k', '<Cmd>lua vim.lsp.buf.signature_help()<CR>', opts)

  buf_set_keymap('n', 'gk', '<Cmd>lua vim.lsp.diagnostic.show_line_diagnostics({focusable=false})<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<Cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', '<C-j>', '<Cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)

  vim.cmd [[ command! Format execute 'lua vim.lsp.buf.formatting()' ]]
end

local defaults = {
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 200
  },
  handlers = {
    ["textDocument/hover"] = vim.lsp.with(
      vim.lsp.handlers.hover, {
        border = "single"
      }
    ),
    ["textDocument/signatureHelp"] = vim.lsp.with(
      vim.lsp.handlers.signature_help, {
        border = "single"
      }
    ),
    ["textDocument/publishDiagnostics"] = vim.lsp.with(
      vim.lsp.diagnostic.on_publish_diagnostics, {
        -- enable signs
        virtual_text = false,
        update_in_insert = false,
        signs = true,
      }
    ),
  }
}

local rust_analyzer = {
  settings = {
    ["rust-analyzer"] = {
      cargo = {
        allFeatures = true,
      },
      rustfmt = {
        enableRangeFormatting = true,
      }
    }
  }
}

local servers = {
  'jedi_language_server' = {},
  'rust_analyzer' = rust_analyzer,
}

local nvim_lsp = require('lspconfig')
for server, config in pairs(servers) do
  nvim_lsp[server].setup(vim.tbl_deep_extend("force", defaults, config))
end
EOF

set completeopt=menuone,noinsert,noselect
" Use <Tab> and <S-Tab> to navigate through popup menu
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
